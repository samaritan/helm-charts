# Global values
#
global:
  kibanaEnabled: true
  coordinating:
    name: coordinating-only

# Container images
# 
# registry -- Container registry from which all images are pulled.
registry: "ghcr.io"
image:
  # -- List of secret names to use when attempting to access private container image registries. The secrets are _assumed_ to be existing in the namespace into which the chart will be installed.
  pullSecrets: []

# File system required to support persistence in certain containers
# 
storage:
  # -- Storage provider to use for persistent storage in stateful services. Must be one of `local` for volume backed by [`hostPath`](https://kubernetes.io/docs/concepts/storage/volumes/#hostpath) or `efs` for volume backed by Amazon Elastic File System.
  provider: "local"
  providers:
    efs:
      # -- Unique identifier assigned to the Amazon Elastic File System (EFS).
      fileSystemId: ""
    local:
      # -- Absolute path of the directory on the node that will host the Kubernetes pods that will form the root of the persistent volume mapped onto the pods.
      root: "/data/"

# Ingress used to make services publicly accessible via a URL
#
ingress:
  # -- Ingress provider to use to provision publicly accessible URLs for services. Must be one of `public` for [NGINX Ingress Controller](https://kubernetes.github.io/ingress-nginx/) or `alb` for [AWS Load Balancer Controller](https://kubernetes-sigs.github.io/aws-load-balancer-controller/latest/).
  provider: "public"  # Must be `public` or `alb`
  hostname:
    # -- URL to use for the Samaritan API Service endpoint.
    api: "api.samaritan.works"
    # -- URL to use for the Samaritan Web Application endpoint.
    web: "explore.samaritan.works"

# MySQL database used by Samaritan to persist data
#
mysql:
  # -- Set to `true` if you wish you use a MySQL instance provisioned outside of the Kubernetes deployment.
  external: false
  # -- URL of the external MySQL instance.
  externalName: ""
  # -- MySQL port.
  port: 3306
  application:
    # -- MySQL application user. The services that need to persist data to a MySQL database will use this as the user.
    user: "samaritan"
    # -- **[Required]** MySQL application password. The services that need to persist data to a MySQL database will use this as the password.
    password: null
  root:
    # -- **[Required]** MySQL root password.
    password: null

# RabbitMQ used by services that compose Samaritan to communicate with one another
#
rabbitmq:
  # -- Set to `true` if you wish you use a RabbitMQ instance provisioned outside of the Kubernetes deployment.
  external: false
  # -- URL of the external RabbitMQ instance.
  externalName: ""
  # -- URI scheme to use when connecting to RabbitMQ. Must be one of `amqp` for an unsecure connection or `amqps` for a secure connection.
  protocol: "amqp"
  # -- RabbitMQ port.
  port: 5672
  # -- RabbitMQ application user. The services that use RabbitMQ for communication will use this as the user.
  user: "samaritan"
  # -- **[Required]** RabbitMQ application password. The services that use RabbitMQ for communication will use this as the password.
  password: null

# Redis used by the `repository` service to cache content
#
redis:
  # -- **[Required]** Redis application password. The services that use Redis for caching will use this as the password.
  password: null

# Enable Elasticsearch, Fluentd, and Kibana (EFK) for Samaritan
#
observe:
  # -- Set to `true` if you wish to install EFK (Elasticsearch, Fluentd, and Kibana) stack to observe Samaritan.
  enabled: false

# Fluentd configuration to appropriately parse log information emitted by Samaritan services.
#
fluentd:
  forwarder:
    # -- Configuration map to use to set up Fluentd to appropriately parse Samaritan logs.
    # @default -- Check `values.yaml`
    configMapFiles:
      fluentd-inputs.conf: |
        # HTTP input for the liveness and readiness probes
        <source>
          @type http
          port 9880
        </source>

        # Get the logs from the containers running in the node
        <source>
          @type tail
          path /var/log/containers/*.log
          exclude_path /var/log/containers/*fluentd*.log
          pos_file /opt/bitnami/fluentd/logs/buffers/fluentd-docker.pos
          tag kubernetes.*
          read_from_head true
          <parse>
            @type none
            # TODO: Enable `regexp` parsing to ensure components of the log
            #       message are parsed
            # @type regexp
            # expression /^(?<time>\d{4}-\d{2}-\d{2}\s\d{2}:\d{2}:\d{2},\d{3})\s-\s(?<module>[^ ]*)\s-\s(?<level>[^ ]*)\s-\s(?<message>.*)$/
            # time_format %Y-%m-%d %H:%M:%S,%L
          </parse>
        </source>

        # Enrich with kubernetes metadata
        <filter kubernetes.**>
          @type kubernetes_metadata
        </filter>
  aggregator:
    # -- Name of the configuration map to use to set up Fluentd aggregator to forward logs to Elasticsearch.
    configMap: fluentd-aggregator-cm

# Kibana configuration (via Elasticsearch) to enable ingress.
#
elasticsearch:
  kibana:
    ingress:
      enabled: true
      # -- URL to use for the Kibana ingress.
      hostname: "observe.samaritan.local"
